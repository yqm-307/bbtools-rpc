// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_protocol/AddAndStr.proto

#include "test_protocol/AddAndStr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AddReq::AddReq(
    ::_pbi::ConstantInitialized)
  : a_(0)
  , b_(0){}
struct AddReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReqDefaultTypeInternal() {}
  union {
    AddReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReqDefaultTypeInternal _AddReq_default_instance_;
PROTOBUF_CONSTEXPR AddRsp::AddRsp(
    ::_pbi::ConstantInitialized)
  : result_(0){}
struct AddRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRspDefaultTypeInternal() {}
  union {
    AddRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRspDefaultTypeInternal _AddRsp_default_instance_;
PROTOBUF_CONSTEXPR EchoReq::EchoReq(
    ::_pbi::ConstantInitialized)
  : str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct EchoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoReqDefaultTypeInternal() {}
  union {
    EchoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoReqDefaultTypeInternal _EchoReq_default_instance_;
PROTOBUF_CONSTEXPR EchoRsp::EchoRsp(
    ::_pbi::ConstantInitialized)
  : str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct EchoRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EchoRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EchoRspDefaultTypeInternal() {}
  union {
    EchoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EchoRspDefaultTypeInternal _EchoRsp_default_instance_;
PROTOBUF_CONSTEXPR address::address(
    ::_pbi::ConstantInitialized)
  : addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , port_(0){}
struct addressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addressDefaultTypeInternal() {}
  union {
    address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addressDefaultTypeInternal _address_default_instance_;
PROTOBUF_CONSTEXPR ServiceRegistReq::ServiceRegistReq(
    ::_pbi::ConstantInitialized)
  : addr_(nullptr){}
struct ServiceRegistReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceRegistReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceRegistReqDefaultTypeInternal() {}
  union {
    ServiceRegistReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceRegistReqDefaultTypeInternal _ServiceRegistReq_default_instance_;
PROTOBUF_CONSTEXPR ServiceRegistRsp::ServiceRegistRsp(
    ::_pbi::ConstantInitialized)
  : msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0){}
struct ServiceRegistRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceRegistRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceRegistRspDefaultTypeInternal() {}
  union {
    ServiceRegistRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceRegistRspDefaultTypeInternal _ServiceRegistRsp_default_instance_;
PROTOBUF_CONSTEXPR GetServiceListReq::GetServiceListReq(
    ::_pbi::ConstantInitialized){}
struct GetServiceListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceListReqDefaultTypeInternal() {}
  union {
    GetServiceListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceListReqDefaultTypeInternal _GetServiceListReq_default_instance_;
PROTOBUF_CONSTEXPR GetServiceListRsp::GetServiceListRsp(
    ::_pbi::ConstantInitialized)
  : serv_list_(){}
struct GetServiceListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceListRspDefaultTypeInternal() {}
  union {
    GetServiceListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceListRspDefaultTypeInternal _GetServiceListRsp_default_instance_;
static ::_pb::Metadata file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test_5fprotocol_2fAddAndStr_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_5fprotocol_2fAddAndStr_2eproto = nullptr;

const uint32_t TableStruct_test_5fprotocol_2fAddAndStr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AddReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AddReq, a_),
  PROTOBUF_FIELD_OFFSET(::AddReq, b_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AddRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AddRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AddRsp, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::EchoReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EchoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EchoReq, str_),
  0,
  PROTOBUF_FIELD_OFFSET(::EchoRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EchoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EchoRsp, str_),
  0,
  PROTOBUF_FIELD_OFFSET(::address, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::address, addr_),
  PROTOBUF_FIELD_OFFSET(::address, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ServiceRegistReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServiceRegistReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServiceRegistReq, addr_),
  0,
  PROTOBUF_FIELD_OFFSET(::ServiceRegistRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServiceRegistRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServiceRegistRsp, status_),
  PROTOBUF_FIELD_OFFSET(::ServiceRegistRsp, msg_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetServiceListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetServiceListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetServiceListRsp, serv_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::AddReq)},
  { 10, 17, -1, sizeof(::AddRsp)},
  { 18, 25, -1, sizeof(::EchoReq)},
  { 26, 33, -1, sizeof(::EchoRsp)},
  { 34, 42, -1, sizeof(::address)},
  { 44, 51, -1, sizeof(::ServiceRegistReq)},
  { 52, 60, -1, sizeof(::ServiceRegistRsp)},
  { 62, -1, -1, sizeof(::GetServiceListReq)},
  { 68, -1, -1, sizeof(::GetServiceListRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AddReq_default_instance_._instance,
  &::_AddRsp_default_instance_._instance,
  &::_EchoReq_default_instance_._instance,
  &::_EchoRsp_default_instance_._instance,
  &::_address_default_instance_._instance,
  &::_ServiceRegistReq_default_instance_._instance,
  &::_ServiceRegistRsp_default_instance_._instance,
  &::_GetServiceListReq_default_instance_._instance,
  &::_GetServiceListRsp_default_instance_._instance,
};

const char descriptor_table_protodef_test_5fprotocol_2fAddAndStr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035test_protocol/AddAndStr.proto\"\036\n\006AddRe"
  "q\022\t\n\001a\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\"\030\n\006AddRsp\022\016\n\006res"
  "ult\030\002 \001(\005\"\026\n\007EchoReq\022\013\n\003str\030\002 \001(\t\"\026\n\007Ech"
  "oRsp\022\013\n\003str\030\002 \001(\t\"%\n\007address\022\014\n\004addr\030\001 \001"
  "(\t\022\014\n\004port\030\002 \001(\005\"*\n\020ServiceRegistReq\022\026\n\004"
  "addr\030\001 \001(\0132\010.address\"/\n\020ServiceRegistRsp"
  "\022\016\n\006status\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\023\n\021GetServ"
  "iceListReq\"0\n\021GetServiceListRsp\022\033\n\tserv_"
  "list\030\001 \003(\0132\010.addressB\003\200\001\001"
  ;
static ::_pbi::once_flag descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_5fprotocol_2fAddAndStr_2eproto = {
    false, false, 345, descriptor_table_protodef_test_5fprotocol_2fAddAndStr_2eproto,
    "test_protocol/AddAndStr.proto",
    &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_test_5fprotocol_2fAddAndStr_2eproto::offsets,
    file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto, file_level_enum_descriptors_test_5fprotocol_2fAddAndStr_2eproto,
    file_level_service_descriptors_test_5fprotocol_2fAddAndStr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter() {
  return &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_5fprotocol_2fAddAndStr_2eproto(&descriptor_table_test_5fprotocol_2fAddAndStr_2eproto);

// ===================================================================

class AddReq::_Internal {
 public:
  using HasBits = decltype(std::declval<AddReq>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AddReq::AddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AddReq)
}
AddReq::AddReq(const AddReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:AddReq)
}

inline void AddReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
}

AddReq::~AddReq() {
  // @@protoc_insertion_point(destructor:AddReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:AddReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&a_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_a(), target);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddReq)
  return target;
}

size_t AddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 a = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

    // optional int32 b = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReq::GetClassData() const { return &_class_data_; }

void AddReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddReq *>(to)->MergeFrom(
      static_cast<const AddReq &>(from));
}


void AddReq::MergeFrom(const AddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReq::CopyFrom(const AddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReq::IsInitialized() const {
  return true;
}

void AddReq::InternalSwap(AddReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddReq, b_)
      + sizeof(AddReq::b_)
      - PROTOBUF_FIELD_OFFSET(AddReq, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[0]);
}

// ===================================================================

class AddRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<AddRsp>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddRsp::AddRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AddRsp)
}
AddRsp::AddRsp(const AddRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:AddRsp)
}

inline void AddRsp::SharedCtor() {
result_ = 0;
}

AddRsp::~AddRsp() {
  // @@protoc_insertion_point(destructor:AddRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:AddRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddRsp)
  return target;
}

size_t AddRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 result = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRsp::GetClassData() const { return &_class_data_; }

void AddRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddRsp *>(to)->MergeFrom(
      static_cast<const AddRsp &>(from));
}


void AddRsp::MergeFrom(const AddRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRsp::CopyFrom(const AddRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRsp::IsInitialized() const {
  return true;
}

void AddRsp::InternalSwap(AddRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[1]);
}

// ===================================================================

class EchoReq::_Internal {
 public:
  using HasBits = decltype(std::declval<EchoReq>()._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EchoReq::EchoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:EchoReq)
}
EchoReq::EchoReq(const EchoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str()) {
    str_.Set(from._internal_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EchoReq)
}

inline void EchoReq::SharedCtor() {
str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoReq::~EchoReq() {
  // @@protoc_insertion_point(destructor:EchoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.Destroy();
}

void EchoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EchoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EchoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "EchoReq.str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EchoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EchoReq.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EchoReq)
  return target;
}

size_t EchoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EchoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EchoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoReq::GetClassData() const { return &_class_data_; }

void EchoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EchoReq *>(to)->MergeFrom(
      static_cast<const EchoReq &>(from));
}


void EchoReq::MergeFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EchoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str()) {
    _internal_set_str(from._internal_str());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoReq::CopyFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EchoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoReq::IsInitialized() const {
  return true;
}

void EchoReq::InternalSwap(EchoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[2]);
}

// ===================================================================

class EchoRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<EchoRsp>()._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EchoRsp::EchoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:EchoRsp)
}
EchoRsp::EchoRsp(const EchoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str()) {
    str_.Set(from._internal_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EchoRsp)
}

inline void EchoRsp::SharedCtor() {
str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EchoRsp::~EchoRsp() {
  // @@protoc_insertion_point(destructor:EchoRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EchoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.Destroy();
}

void EchoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EchoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:EchoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "EchoRsp.str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EchoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EchoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EchoRsp.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EchoRsp)
  return target;
}

size_t EchoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EchoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EchoRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EchoRsp::GetClassData() const { return &_class_data_; }

void EchoRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EchoRsp *>(to)->MergeFrom(
      static_cast<const EchoRsp &>(from));
}


void EchoRsp::MergeFrom(const EchoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EchoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str()) {
    _internal_set_str(from._internal_str());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EchoRsp::CopyFrom(const EchoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EchoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRsp::IsInitialized() const {
  return true;
}

void EchoRsp::InternalSwap(EchoRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[3]);
}

// ===================================================================

class address::_Internal {
 public:
  using HasBits = decltype(std::declval<address>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

address::address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:address)
}
address::address(const address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_addr()) {
    addr_.Set(from._internal_addr(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:address)
}

inline void address::SharedCtor() {
addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = 0;
}

address::~address() {
  // @@protoc_insertion_point(destructor:address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addr_.Destroy();
}

void address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void address::Clear() {
// @@protoc_insertion_point(message_clear_start:address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmpty();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "address.addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "address.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:address)
  return target;
}

size_t address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr());
    }

    // optional int32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*address::GetClassData() const { return &_class_data_; }

void address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<address *>(to)->MergeFrom(
      static_cast<const address &>(from));
}


void address::MergeFrom(const address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:address)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addr(from._internal_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void address::CopyFrom(const address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool address::IsInitialized() const {
  return true;
}

void address::InternalSwap(address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[4]);
}

// ===================================================================

class ServiceRegistReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRegistReq>()._has_bits_);
  static const ::address& addr(const ServiceRegistReq* msg);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::address&
ServiceRegistReq::_Internal::addr(const ServiceRegistReq* msg) {
  return *msg->addr_;
}
ServiceRegistReq::ServiceRegistReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ServiceRegistReq)
}
ServiceRegistReq::ServiceRegistReq(const ServiceRegistReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_addr()) {
    addr_ = new ::address(*from.addr_);
  } else {
    addr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ServiceRegistReq)
}

inline void ServiceRegistReq::SharedCtor() {
addr_ = nullptr;
}

ServiceRegistReq::~ServiceRegistReq() {
  // @@protoc_insertion_point(destructor:ServiceRegistReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceRegistReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete addr_;
}

void ServiceRegistReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceRegistReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceRegistReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(addr_ != nullptr);
    addr_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceRegistReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .address addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceRegistReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceRegistReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .address addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::addr(this),
        _Internal::addr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceRegistReq)
  return target;
}

size_t ServiceRegistReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceRegistReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .address addr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceRegistReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceRegistReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceRegistReq::GetClassData() const { return &_class_data_; }

void ServiceRegistReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceRegistReq *>(to)->MergeFrom(
      static_cast<const ServiceRegistReq &>(from));
}


void ServiceRegistReq::MergeFrom(const ServiceRegistReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceRegistReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_addr()) {
    _internal_mutable_addr()->::address::MergeFrom(from._internal_addr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceRegistReq::CopyFrom(const ServiceRegistReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceRegistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRegistReq::IsInitialized() const {
  return true;
}

void ServiceRegistReq::InternalSwap(ServiceRegistReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRegistReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[5]);
}

// ===================================================================

class ServiceRegistRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceRegistRsp>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServiceRegistRsp::ServiceRegistRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ServiceRegistRsp)
}
ServiceRegistRsp::ServiceRegistRsp(const ServiceRegistRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ServiceRegistRsp)
}

inline void ServiceRegistRsp::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

ServiceRegistRsp::~ServiceRegistRsp() {
  // @@protoc_insertion_point(destructor:ServiceRegistRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceRegistRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.Destroy();
}

void ServiceRegistRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceRegistRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceRegistRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceRegistRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ServiceRegistRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceRegistRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceRegistRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ServiceRegistRsp.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceRegistRsp)
  return target;
}

size_t ServiceRegistRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceRegistRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional int32 status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceRegistRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceRegistRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceRegistRsp::GetClassData() const { return &_class_data_; }

void ServiceRegistRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceRegistRsp *>(to)->MergeFrom(
      static_cast<const ServiceRegistRsp &>(from));
}


void ServiceRegistRsp::MergeFrom(const ServiceRegistRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceRegistRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceRegistRsp::CopyFrom(const ServiceRegistRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceRegistRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRegistRsp::IsInitialized() const {
  return true;
}

void ServiceRegistRsp::InternalSwap(ServiceRegistRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRegistRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[6]);
}

// ===================================================================

class GetServiceListReq::_Internal {
 public:
};

GetServiceListReq::GetServiceListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:GetServiceListReq)
}
GetServiceListReq::GetServiceListReq(const GetServiceListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetServiceListReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceListReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetServiceListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[7]);
}

// ===================================================================

class GetServiceListRsp::_Internal {
 public:
};

GetServiceListRsp::GetServiceListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  serv_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:GetServiceListRsp)
}
GetServiceListRsp::GetServiceListRsp(const GetServiceListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      serv_list_(from.serv_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetServiceListRsp)
}

inline void GetServiceListRsp::SharedCtor() {
}

GetServiceListRsp::~GetServiceListRsp() {
  // @@protoc_insertion_point(destructor:GetServiceListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServiceListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:GetServiceListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serv_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .address serv_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serv_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetServiceListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .address serv_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_serv_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_serv_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetServiceListRsp)
  return target;
}

size_t GetServiceListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetServiceListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .address serv_list = 1;
  total_size += 1UL * this->_internal_serv_list_size();
  for (const auto& msg : this->serv_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceListRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceListRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceListRsp::GetClassData() const { return &_class_data_; }

void GetServiceListRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceListRsp *>(to)->MergeFrom(
      static_cast<const GetServiceListRsp &>(from));
}


void GetServiceListRsp::MergeFrom(const GetServiceListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetServiceListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  serv_list_.MergeFrom(from.serv_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceListRsp::CopyFrom(const GetServiceListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetServiceListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceListRsp::IsInitialized() const {
  return true;
}

void GetServiceListRsp::InternalSwap(GetServiceListRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  serv_list_.InternalSwap(&other->serv_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceListRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_getter, &descriptor_table_test_5fprotocol_2fAddAndStr_2eproto_once,
      file_level_metadata_test_5fprotocol_2fAddAndStr_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AddReq*
Arena::CreateMaybeMessage< ::AddReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AddReq >(arena);
}
template<> PROTOBUF_NOINLINE ::AddRsp*
Arena::CreateMaybeMessage< ::AddRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AddRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::EchoReq*
Arena::CreateMaybeMessage< ::EchoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EchoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EchoRsp*
Arena::CreateMaybeMessage< ::EchoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EchoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::address*
Arena::CreateMaybeMessage< ::address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::address >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceRegistReq*
Arena::CreateMaybeMessage< ::ServiceRegistReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceRegistReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceRegistRsp*
Arena::CreateMaybeMessage< ::ServiceRegistRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceRegistRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::GetServiceListReq*
Arena::CreateMaybeMessage< ::GetServiceListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetServiceListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GetServiceListRsp*
Arena::CreateMaybeMessage< ::GetServiceListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetServiceListRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
