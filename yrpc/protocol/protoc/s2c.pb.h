// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2c.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_s2c_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_s2c_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2c_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_s2c_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s2c_2eproto;
class S2C_HEARTBEAT_RSP;
struct S2C_HEARTBEAT_RSPDefaultTypeInternal;
extern S2C_HEARTBEAT_RSPDefaultTypeInternal _S2C_HEARTBEAT_RSP_default_instance_;
class S2C_RPC_ERROR;
struct S2C_RPC_ERRORDefaultTypeInternal;
extern S2C_RPC_ERRORDefaultTypeInternal _S2C_RPC_ERROR_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::S2C_HEARTBEAT_RSP* Arena::CreateMaybeMessage<::S2C_HEARTBEAT_RSP>(Arena*);
template<> ::S2C_RPC_ERROR* Arena::CreateMaybeMessage<::S2C_RPC_ERROR>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class S2C_HEARTBEAT_RSP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2C_HEARTBEAT_RSP) */ {
 public:
  inline S2C_HEARTBEAT_RSP() : S2C_HEARTBEAT_RSP(nullptr) {}
  ~S2C_HEARTBEAT_RSP() override;
  explicit PROTOBUF_CONSTEXPR S2C_HEARTBEAT_RSP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_HEARTBEAT_RSP(const S2C_HEARTBEAT_RSP& from);
  S2C_HEARTBEAT_RSP(S2C_HEARTBEAT_RSP&& from) noexcept
    : S2C_HEARTBEAT_RSP() {
    *this = ::std::move(from);
  }

  inline S2C_HEARTBEAT_RSP& operator=(const S2C_HEARTBEAT_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_HEARTBEAT_RSP& operator=(S2C_HEARTBEAT_RSP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_HEARTBEAT_RSP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_HEARTBEAT_RSP* internal_default_instance() {
    return reinterpret_cast<const S2C_HEARTBEAT_RSP*>(
               &_S2C_HEARTBEAT_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S2C_HEARTBEAT_RSP& a, S2C_HEARTBEAT_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_HEARTBEAT_RSP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_HEARTBEAT_RSP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_HEARTBEAT_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_HEARTBEAT_RSP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_HEARTBEAT_RSP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_HEARTBEAT_RSP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_HEARTBEAT_RSP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2C_HEARTBEAT_RSP";
  }
  protected:
  explicit S2C_HEARTBEAT_RSP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 1,
  };
  // int32 tick = 1;
  void clear_tick();
  int32_t tick() const;
  void set_tick(int32_t value);
  private:
  int32_t _internal_tick() const;
  void _internal_set_tick(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:S2C_HEARTBEAT_RSP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2c_2eproto;
};
// -------------------------------------------------------------------

class S2C_RPC_ERROR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2C_RPC_ERROR) */ {
 public:
  inline S2C_RPC_ERROR() : S2C_RPC_ERROR(nullptr) {}
  ~S2C_RPC_ERROR() override;
  explicit PROTOBUF_CONSTEXPR S2C_RPC_ERROR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RPC_ERROR(const S2C_RPC_ERROR& from);
  S2C_RPC_ERROR(S2C_RPC_ERROR&& from) noexcept
    : S2C_RPC_ERROR() {
    *this = ::std::move(from);
  }

  inline S2C_RPC_ERROR& operator=(const S2C_RPC_ERROR& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RPC_ERROR& operator=(S2C_RPC_ERROR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RPC_ERROR& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RPC_ERROR* internal_default_instance() {
    return reinterpret_cast<const S2C_RPC_ERROR*>(
               &_S2C_RPC_ERROR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_RPC_ERROR& a, S2C_RPC_ERROR& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RPC_ERROR* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RPC_ERROR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RPC_ERROR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RPC_ERROR>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RPC_ERROR& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_RPC_ERROR& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RPC_ERROR* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2C_RPC_ERROR";
  }
  protected:
  explicit S2C_RPC_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kErrnocodeFieldNumber = 1,
  };
  // string info = 2;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 errnocode = 1;
  void clear_errnocode();
  int32_t errnocode() const;
  void set_errnocode(int32_t value);
  private:
  int32_t _internal_errnocode() const;
  void _internal_set_errnocode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:S2C_RPC_ERROR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  int32_t errnocode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_s2c_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2C_HEARTBEAT_RSP

// int32 tick = 1;
inline void S2C_HEARTBEAT_RSP::clear_tick() {
  tick_ = 0;
}
inline int32_t S2C_HEARTBEAT_RSP::_internal_tick() const {
  return tick_;
}
inline int32_t S2C_HEARTBEAT_RSP::tick() const {
  // @@protoc_insertion_point(field_get:S2C_HEARTBEAT_RSP.tick)
  return _internal_tick();
}
inline void S2C_HEARTBEAT_RSP::_internal_set_tick(int32_t value) {
  
  tick_ = value;
}
inline void S2C_HEARTBEAT_RSP::set_tick(int32_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:S2C_HEARTBEAT_RSP.tick)
}

// -------------------------------------------------------------------

// S2C_RPC_ERROR

// int32 errnocode = 1;
inline void S2C_RPC_ERROR::clear_errnocode() {
  errnocode_ = 0;
}
inline int32_t S2C_RPC_ERROR::_internal_errnocode() const {
  return errnocode_;
}
inline int32_t S2C_RPC_ERROR::errnocode() const {
  // @@protoc_insertion_point(field_get:S2C_RPC_ERROR.errnocode)
  return _internal_errnocode();
}
inline void S2C_RPC_ERROR::_internal_set_errnocode(int32_t value) {
  
  errnocode_ = value;
}
inline void S2C_RPC_ERROR::set_errnocode(int32_t value) {
  _internal_set_errnocode(value);
  // @@protoc_insertion_point(field_set:S2C_RPC_ERROR.errnocode)
}

// string info = 2;
inline void S2C_RPC_ERROR::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& S2C_RPC_ERROR::info() const {
  // @@protoc_insertion_point(field_get:S2C_RPC_ERROR.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_RPC_ERROR::set_info(ArgT0&& arg0, ArgT... args) {
 
 info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2C_RPC_ERROR.info)
}
inline std::string* S2C_RPC_ERROR::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:S2C_RPC_ERROR.info)
  return _s;
}
inline const std::string& S2C_RPC_ERROR::_internal_info() const {
  return info_.Get();
}
inline void S2C_RPC_ERROR::_internal_set_info(const std::string& value) {
  
  info_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_RPC_ERROR::_internal_mutable_info() {
  
  return info_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_RPC_ERROR::release_info() {
  // @@protoc_insertion_point(field_release:S2C_RPC_ERROR.info)
  return info_.Release();
}
inline void S2C_RPC_ERROR::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_.IsDefault()) {
    info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2C_RPC_ERROR.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_s2c_2eproto
